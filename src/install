
# Detailed Installation Guide for SI4IoT

## Prerequisites
Before setting up the SI4IoT project, make sure that your environment is correctly configured with the following software:

1. **Eclipse IDE**: Download and install Eclipse IDE for Java and DSL Developers.
2. **Java Development Kit (JDK)**: Ensure that JDK 8 or a compatible version is installed.
3. **Git**: Install Git for version control to clone the repository.
4. **Eclipse Plugins**:
   - **Eclipse Modeling Framework (EMF)**: For metamodel and model creation.
   - **Sirius**: To create graphical editors for the DSL models.
   - **Acceleo**: For code generation through Model-to-Text transformations.
   - **Xtext**: If you need to define new DSLs or modify the existing DSL syntax.

### Step-by-Step Installation Instructions

1. **Set up the Eclipse Environment**:
   - Open Eclipse IDE.
   - Go to `Help` > `Eclipse Marketplace`.
   - Search for the required plugins: **EMF**, **Sirius**, **Acceleo**, and **Xtext**.
   - Install each plugin and restart Eclipse as prompted.

2. **Download the SI4IoT Repository**:
   - Open a terminal window or use the Git interface in Eclipse.
   - Clone the repository using the following command:
     ```bash
     git clone https://github.com/acgtic211/si4iot
     ```
   - Alternatively, you can clone it directly in Eclipse by going to `File` > `Import` > `Git` > `Projects from Git`.

3. **Import the Project into Eclipse**:
   - Open Eclipse and go to `File` > `Import`.
   - Choose `Existing Projects into Workspace` and click `Next`.
   - Navigate to the directory where you cloned the repository and select it.
   - Make sure the option `Copy projects into workspace` is unchecked.
   - Click `Finish` to import the project.

4. **Configure the Project**:
   - Right-click on the project and select `Properties`.
   - Go to `Java Build Path` and ensure all dependencies are correctly linked.
   - Verify that `Sirius`, `EMF`, and `Acceleo` libraries are included.

5. **Setting up the Sirius Editor**:
   - Open the `.aird` file within the project structure to launch the Sirius editor.
   - If no `.aird` file is present, create a new Sirius project and define a `Viewpoint Specification Project`.
   - Add the corresponding `ecore` models and graphical representations for each layer (Physical, Logical, and Application).

6. **Model Transformation**:
   - Use the **Acceleo** transformation scripts to generate code from the defined models.
   - Right-click on the `.mtl` file and select `Run As` > `Acceleo Application`.
   - Choose the source models and the target directory for code generation.

7. **Building and Deploying**:
   - Compile the generated code and link it to the corresponding platform libraries (e.g., Arduino libraries or Android SDK).
   - For IoT device deployment, follow the platform-specific deployment steps. For example:
     - **Arduino**: Use the Arduino IDE to upload the generated `.ino` files.
     - **Android**: Open the Android Studio, import the project, and build the APK.

8. **Run and Test**:
   - Deploy the solution on the target devices (sensors, actuators, etc.).
   - Use monitoring tools to verify communication between layers.
   - Ensure that all RESTful APIs and MQTT protocols are functioning as expected.

## Troubleshooting Tips
1. **Plugin Issues**:
   - If you encounter missing dependencies, go to `Help` > `Install New Software` and manually add the required repositories.
   - Ensure that the correct versions of the plugins are installed.

2. **Code Generation Errors**:
   - Verify that all metamodels (`.ecore` files) are correctly linked.
   - Check that the `.genmodel` files are updated and match the `.ecore` structure.

3. **Device Connection Problems**:
   - Check the network configurations and connectivity settings in the Physical Layer.
   - Ensure that the correct communication protocols (e.g., RESTful APIs, MQTT) are set up.

By following these steps, you should be able to successfully install and set up the SI4IoT project. If you encounter any issues, refer to the documentation included in the `docs/` folder or reach out through the project's GitHub issues page.
